#!/bin/bash

readonly SETUP_REPOSITORY_NAME='github.com/humangas/dotfiles'

display_logo() {
    _logo="
      ██████╗  ██████╗ ████████╗███████╗██╗██╗     ███████╗███████╗
      ██╔══██╗██╔═══██╗╚══██╔══╝██╔════╝██║██║     ██╔════╝██╔════╝
      ██║  ██║██║   ██║   ██║   █████╗  ██║██║     █████╗  ███████╗
      ██║  ██║██║   ██║   ██║   ██╔══╝  ██║██║     ██╔══╝  ╚════██║
      ██████╔╝╚██████╔╝   ██║   ██║     ██║███████╗███████╗███████║
      ╚═════╝  ╚═════╝    ╚═╝   ╚═╝     ╚═╝╚══════╝╚══════╝╚══════╝
                                                                   
                                                                   
      humangas's macOS setup tool and dotfiles
      See also: https://$SETUP_REPOSITORY_NAME

      Copyright (c) 2017 humangas
      Licensed under the MIT license.
    "
    echo "$_logo"
}

# Examples: log "INFO" "info message"
log() {
    local type="${1:?Error: type is required}"
    local msg="${2:?Error: msg is required}"

    case "$type" in
        INFO)   printf "\e[34m$msg\e[m\n" ;;
        WARN)   printf "\e[35m$msg\e[m\n" ;;
        ERROR)  printf "\e[31m$msg\e[m\n" ;;
        *)      printf "\e[31mFatal: \"$type\" is an undefined type. Please implement it in the \"log\" function.\e[m\n"
                exit 1
                ;;
    esac
}

check_httpstatus() {
    local httpstatus=`curl -LI https://${SETUP_REPOSITORY_NAME} -o /dev/null -w '%{http_code}\n' -s`
    if [ "$httpstatus" -ne 200 ]; then
        log "ERROR" "Error Could not connect: https://${SETUP_REPOSITORY_NAME} HTTP_STATUS: $httpstatus"
        exit 1
    fi
}

download_repository() {
    log "INFO" "Download Setup Repository..."
    curl -L https://${SETUP_REPOSITORY_NAME}/archive/master.tar.gz -# | tar xz -C ${SETUP_WORKTMPDIR} --strip=1
}

init() {
    log "INFO" "Install dotfiles and some apps..."

    local roles tags tags_option
    roles=()
    if [[ -f $SETUP_ROLES_LIST ]]; then
        while read r; do
            [[ $r =~ ^# ]] && continue
            roles+=("$r")
        done < <(cat $SETUP_ROLES_LIST) 
    fi

    if [[ -f $SETUP_TAGS_LIST ]]; then
        tags=()
        while read t; do
            [[ $t =~ ^# ]] && continue
            tags+=("$t")
        done < <(cat $SETUP_TAGS_LIST) 
        tags_option="-tags $(echo ${tags[@]} | tr ' ' ',')"
    fi

    bash "$SETUP_WORKTMPDIR/roles/setup.sh" install "$tags_option" "${roles[@]}" 2>&1 | tee "$PWD/install.log"
}

finally() {
    [[ "$SETUP_WORKTMPDIR" ]] && rm -rf "$SETUP_WORKTMPDIR"
}

exception() {
    log "ERROR" "Error!!"
    finally
    exit 1
}

main() {
    display_logo
    log "INFO" "[$(date +'%Y-%m-%d %H:%M:%S')] Install..."
    check_httpstatus
    SETUP_WORKTMPDIR=`mktemp -d`
    download_repository
    init
    local dependlog="$(grep -ni --color=auto 'Installing .* dependency' "$PWD/install.log")"
    local warnlog="$(grep -n --color=auto 'Warning' "$PWD/install.log")"
    local errorlog="$(grep -n --color=auto 'Error' "$PWD/install.log")"
    printf "\n"
    [[ ! -z "$dependlog" ]] && (log "INFO" "To define dependencies on your own, please refer to the following:" && echo -e "$dependlog\n")
    [[ ! -z "$warnlog" ]] && (log "WARN" "Following warning occurred. please confirm the contents:" && echo -e "$warnlog\n")
    [[ ! -z "$errorlog" ]] && (log "ERROR" "Following error occurred. please confirm the contents:" && echo -e "$errorlog\n")
    if [[ -z "$errorlog" ]]; then
        log "INFO" "[$(date +'%Y-%m-%d %H:%M:%S')] Finish!! Please Reboot the OS (Log: ./install.log)"
    else
        log "ERROR" "[$(date +'%Y-%m-%d %H:%M:%S')] Error!! Processing was interrupted (Log: ./install.log)"
    fi
}

trap finally 0
trap exception 1 2 3 15

main
