#!/usr/bin/env bash

readonly DOTF_REPOSITORY_NAME='github.com/humangas/dotfiles'
readonly DOTF_SETUP_SCRIPT_PATH='roles/main.sh'
DOTF_BRANCH_NAME="${DOTF_BRANCH_NAME:-master}"

display_logo() {
    _logo="
      ██████╗  ██████╗ ████████╗███████╗██╗██╗     ███████╗███████╗
      ██╔══██╗██╔═══██╗╚══██╔══╝██╔════╝██║██║     ██╔════╝██╔════╝
      ██║  ██║██║   ██║   ██║   █████╗  ██║██║     █████╗  ███████╗
      ██║  ██║██║   ██║   ██║   ██╔══╝  ██║██║     ██╔══╝  ╚════██║
      ██████╔╝╚██████╔╝   ██║   ██║     ██║███████╗███████╗███████║
      ╚═════╝  ╚═════╝    ╚═╝   ╚═╝     ╚═╝╚══════╝╚══════╝╚══════╝
                                                                   
                                                                   
      humangas's macOS setup tool and dotfiles
      See also: https://$DOTF_REPOSITORY_NAME
    "
    echo "$_logo"
}

log() {
    # Examples: log "INFO" "info message"
    local type="${1:?Error: type is required}"
    local msg="${2:?Error: msg is required}"

    case "$type" in
        INFO)   printf "\e[34m$msg\e[m\n" ;;
        WARN)   printf "\e[35m$msg\e[m\n" ;;
        ERROR)  printf "\e[31m$msg\e[m\n" ;;
        *)      printf "\e[31mFatal: \"$type\" is an undefined type. Please implement it in the \"log\" function.\e[m\n"
                exit 1
                ;;
    esac
}

check_httpstatus() {
    local httpstatus=`curl -LI https://${DOTF_REPOSITORY_NAME} -o /dev/null -w '%{http_code}\n' -s`
    if [ "$httpstatus" -ne 200 ]; then
        log ERROR "Error Could not connect: https://${DOTF_REPOSITORY_NAME} HTTP_STATUS: $httpstatus"
        exit 1
    fi

    curl -sLI https://${DOTF_REPOSITORY_NAME}/archive/${DOTF_BRANCH_NAME}.zip | grep '404 Not Found' > /dev/null && {
        log ERROR "Error 404 Not Found: https://${DOTF_REPOSITORY_NAME}/archive/${DOTF_BRANCH_NAME}.zip"
        exit 1
    }
}

download_repository() {
    log INFO "Download Setup Repository..."
    curl -L https://${DOTF_REPOSITORY_NAME}/archive/${DOTF_BRANCH_NAME}.tar.gz -# | tar xz -C ${DOTF_WORKTMPDIR} --strip=1
}

execute() {
    log INFO "Install dotfiles and some apps..."

    local roles role
    if [[ -f $DOTF_ROLES_LIST ]]; then
        while read role; do
            [[ $role =~ ^# ]] && continue
            roles="$roles $role"
        done < <(cat $DOTF_ROLES_LIST) 
        roles=$(echo "${roles}" | tr ' ' '\n' | sed '/^$/d' | sort | uniq)
    else
        roles=$(bash "$DOTF_WORKTMPDIR/$DOTF_SETUP_SCRIPT_PATH" list | sort)
    fi

    rm -f install.log
    echo "$roles" | while read role; do
        bash "$DOTF_WORKTMPDIR/$DOTF_SETUP_SCRIPT_PATH" install $role 2>&1 | tee --append install.log
    done
}

finally() {
    [[ "$DOTF_WORKTMPDIR" ]] && rm -rf "$DOTF_WORKTMPDIR"
}

exception() {
    log "ERROR" "Error!!"
    finally
    exit 1
}

main() {
    display_logo

    log INFO "[$(date +'%Y-%m-%d %H:%M:%S')] Install..."
    check_httpstatus
    DOTF_WORKTMPDIR=`mktemp -d`
    download_repository
    execute

    local dependlog="$(grep -ni --color=auto 'Installing .* dependency' "$PWD/install.log")"
    local warnlog="$(grep -n --color=auto 'Warning' "$PWD/install.log")"
    local errorlog="$(grep -n --color=auto 'Error' "$PWD/install.log")"
    printf "\n"

    [[ ! -z "$dependlog" ]] && (log INFO "To define dependencies on your own, please refer to the following:" && echo -e "$dependlog\n")
    [[ ! -z "$warnlog" ]] && (log WARN "Following warning occurred. please confirm the contents:" && echo -e "$warnlog\n")
    [[ ! -z "$errorlog" ]] && (log ERROR "Following error occurred. please confirm the contents:" && echo -e "$errorlog\n")

    if [[ -z "$errorlog" ]]; then
        log INFO "[$(date +'%Y-%m-%d %H:%M:%S')] Finish!! Please Reboot the OS (Log: ./install.log)"
    else
        log ERROR "[$(date +'%Y-%m-%d %H:%M:%S')] Error!! Processing was interrupted (Log: ./install.log)"
    fi
}

trap finally 0
trap exception 1 2 3 15

main
